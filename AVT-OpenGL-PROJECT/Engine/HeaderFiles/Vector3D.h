#pragma once

#include<math.h>
#include<assert.h>
#include <string>

class Vector3D
{
private:
    float x, y, z;

public:
    Vector3D();

    Vector3D(float xi, float yi, float zi);

    Vector3D clone();
    float getX();
    float getY();
    float getZ();
    void setX(float _x);
    void setY(float _y);
    void setZ(float _z);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por comparar dois vetores como iguais
    ///////////////////////////////////////////////////////////////////////////////
    bool operator==(Vector3D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por igualar dois vetores
    ///////////////////////////////////////////////////////////////////////////////
    Vector3D& operator=(const Vector3D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por comparar dois vetores como diferentes
    ///////////////////////////////////////////////////////////////////////////////
    bool operator!=(Vector3D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por igual um vetor à soma dele próprio com um outro
    ///////////////////////////////////////////////////////////////////////////////
    Vector3D& operator+=(Vector3D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por somar dois vetores
    ///////////////////////////////////////////////////////////////////////////////
    Vector3D operator+(Vector3D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por igual um vetor à subtração dele próprio com um outro
    ///////////////////////////////////////////////////////////////////////////////
    Vector3D& operator-=(Vector3D& component);


    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por subtrair dois vetores
    ///////////////////////////////////////////////////////////////////////////////
    Vector3D operator-(Vector3D& component);


    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por igual um vetor à multiplicação dele próprio por um escalar
    ///////////////////////////////////////////////////////////////////////////////
    Vector3D& operator*=(float scalar);


    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por multiplicar as coordenadas de um vetor por um determinado valor
    ///////////////////////////////////////////////////////////////////////////////
    Vector3D operator*(float scalar);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por igual um vetor à divisor dele próprio por um escalar
    ///////////////////////////////////////////////////////////////////////////////
    Vector3D& operator/=(float scalar);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por dividir as coordenadas de um vetor por um determinado valor
    ///////////////////////////////////////////////////////////////////////////////
    Vector3D operator/(float scalar);

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por calcular o Cross Product entre dois vetores
    ///////////////////////////////////////////////////////////////////////////////
    Vector3D cross(Vector3D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por calcular o Dot Product entre dois vetores
    ///////////////////////////////////////////////////////////////////////////////
    float dot(Vector3D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por verificar se um vetor é igual a outro
    ///////////////////////////////////////////////////////////////////////////////
    bool compare(Vector3D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por retornar o tamanho de um vetor
    ///////////////////////////////////////////////////////////////////////////////
    double length();

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por normalizar um vetor
    ///////////////////////////////////////////////////////////////////////////////
    void normalize();

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por inverter um vetor
    ///////////////////////////////////////////////////////////////////////////////
    Vector3D invert();

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por criar uma String com os dados do Vetor 
    ///////////////////////////////////////////////////////////////////////////////
    std::string toString();

    Vector3D rodriguesRot(Vector3D k, float angle);

};
    Vector3D operator*(float val, Vector3D& vec);

    Vector3D operator/(float val, Vector3D& vec);

    Vector3D operator-(Vector3D& vec);


