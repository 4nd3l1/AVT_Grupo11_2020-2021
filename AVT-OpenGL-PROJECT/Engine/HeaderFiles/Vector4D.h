#pragma once

#include<math.h>
#include<assert.h>
#include <string>

class Vector4D
{
private:
    float x, y, z, w;

public:
    Vector4D();

    Vector4D(float _x, float _y, float _z, float _w);

    Vector4D clone();
    float getX();
    float getY();
    float getZ();
    float getW();
    void setX(float _x);
    void setY(float _y);
    void setZ(float _z);
    void setW(float _w);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por comparar dois vetores como iguais
    ///////////////////////////////////////////////////////////////////////////////
    bool operator==(Vector4D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por igualar dois vetores
    ///////////////////////////////////////////////////////////////////////////////
    Vector4D& operator=(const Vector4D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por comparar dois vetores como diferentes
    ///////////////////////////////////////////////////////////////////////////////
    bool operator!=(Vector4D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por igual um vetor à soma dele próprio com um outro
    ///////////////////////////////////////////////////////////////////////////////
    Vector4D& operator+=(Vector4D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por somar dois vetores
    ///////////////////////////////////////////////////////////////////////////////
    Vector4D operator+(Vector4D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por igual um vetor à subtração dele próprio com um outro
    ///////////////////////////////////////////////////////////////////////////////
    Vector4D& operator-=(Vector4D& component);


    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por subtrair dois vetores
    ///////////////////////////////////////////////////////////////////////////////
    Vector4D operator-(Vector4D& component);


    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por igual um vetor à multiplicação dele próprio por um escalar
    ///////////////////////////////////////////////////////////////////////////////
    Vector4D& operator*=(float scalar);


    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por multiplicar as coordenadas de um vetor por um determinado valor
    ///////////////////////////////////////////////////////////////////////////////
    Vector4D operator*(float scalar);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por igual um vetor à divisor dele próprio por um escalar
    ///////////////////////////////////////////////////////////////////////////////
    Vector4D& operator/=(float scalar);

    ///////////////////////////////////////////////////////////////////////////////
    // Operador responsável por dividir as coordenadas de um vetor por um determinado valor
    ///////////////////////////////////////////////////////////////////////////////
    Vector4D operator/(float scalar);

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por calcular o Dot Product entre dois vetores
    ///////////////////////////////////////////////////////////////////////////////
    float dot(Vector4D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por verificar se um vetor é igual a outro
    ///////////////////////////////////////////////////////////////////////////////
    bool compare(Vector4D& component);

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por retornar o tamanho de um vetor
    ///////////////////////////////////////////////////////////////////////////////
    double length();

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por normalizar um vetor
    ///////////////////////////////////////////////////////////////////////////////
    void normalize();

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por inverter um vetor
    ///////////////////////////////////////////////////////////////////////////////
    Vector4D invert();

    ///////////////////////////////////////////////////////////////////////////////
    // Função responsável por criar uma String com os dados do Vetor 
    ///////////////////////////////////////////////////////////////////////////////
    std::string toString();

};
Vector4D operator*(float val, Vector4D& vec);

Vector4D operator/(float val, Vector4D& vec);

Vector4D operator-(Vector4D& vec);

